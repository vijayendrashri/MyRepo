name: Remove File Demo
# on: [push]
on:
  pull_request:
    types: [closed]
    
jobs:
  config_on_boarding_flow:
    runs-on: ubuntu-latest

 # The sequential steps/tasks in the workflow

    steps:          
    - name: Code Checkout
      uses: actions/checkout@v4
      with:
        ref: main
    - name: Set global email
      run: |
        git config --global user.email "vijayendra05@gmail.com"
        git config --global user.name "vijayendrashri"
    
    - name: Get changed files
      id: get_file
      run: |
        # Ensure you are accessing the correct pull request number
        PR_NUMBER=${{ github.event.pull_request.number }}
        
        if [ -z "$PR_NUMBER" ]; then
          echo "Error: PR number not found."
          exit 1
        fi
        
        URL="https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files"
        FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
        echo "Changed files: $FILES"
        echo "::set-output name=changed_files::$FILES"
        echo "fileName=$FILES" >> "$GITHUB_OUTPUT"    
          
    # - name: "Read YAML config"
    #   id: yamlStatus
    #   uses: pietrobolcato/action-read-yaml@1.0.0        
    #   with:
    #     config: ${{ github.workspace }}/${{ steps.get_file.outputs.fileName }}
    #     run: |
    #        echo status: "${{ steps.yamlStatus.outputs['status'] }}"
     
    - name: Read and parse key-value from file
      id: parse_status
      run: |
        # Check if the file exists
        if [ -f "${{steps.get_file.outputs.fileName}}" ]; then
          # Read the content of the file and parse the key-value
          while IFS=":" read -r key value; do
            echo "Key: $key, Value: $value"
            # You can access individual values as needed, e.g. for status:
            if [ "$key" == "status" ]; then
              echo status=$value >> $GITHUB_OUTPUT
            fi
          done < ${{steps.get_file.outputs.fileName}}
        else
          echo "File not found"
        fi
        

    - name: Use the status output
      run: |
        echo "The status is ${{ steps.parse_status.outputs.status }}"
    
    - name: "Remove Config for Deprecated or Archived file"
      if: steps.parse_status.outputs.status=='DEPRECATED' || steps.parse_status.outputs['status']=='ARCHIVED'
      run: |
        git rm --cached ${{ steps.get_file.outputs.fileName }}
        git commit -m "Remove ${{ steps.get_file.outputs.fileName }}"
        git push origin main
   
